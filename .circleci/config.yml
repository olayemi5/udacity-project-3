version: 2.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws s3 ls
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/3d7mYrNMuy9Pfq5E5yh3yP/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [[ "$SUCCESS" == "1" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm run test
      
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - destroy-environment
          
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2a:c8:6a:e2:fd:5d:01:ec:98:82:f2:41:24:14:2c:18"] 
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add tar gzip 
            apk add python curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Configure server 
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Install curl
          command: |
            sudo apt-get install curl -y
      - run: 
          name: Install awscli
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run: 
          name: Run migrations
          command: |
            cd backend
            npm install 
            npm run migrations > migrations_dump.txt
      - run: 
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/WCfh3dw7CqzAm5rsuvhNh8/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - attach_workspace:
            at: .circleci/ansible/
        - run: 
            name: Install dependencies
            command: |
              sudo apt-get update && sudo apt-get install python -y
              sudo apt-get -qq install awscli
        - run: 
            name: Get backend url
            command: |
              export BACKEND_IP=$( aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
        - run: 
            name: baking backend ip
            command: |
              cd frontend
              npm i
              npm run build
        - run: 
            name: Deploy frontend objects
            command: |
                cd frontend
                npm install
                npm run build
                aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy-environment
        
  deploy-backend:
      docker:
        - image: cimg/python:3.10.4
      steps:
        - checkout
        
        - add_ssh_keys:
            fingerprints:
              - "2a:c8:6a:e2:fd:5d:01:ec:98:82:f2:41:24:14:2c:18"
        
        - attach_workspace:
            at: .circleci/ansible/
          
        - run:
            name: "Install dependencies"
            command: |
              sudo apt-get update
              sudo apt-get install awscli
              sudo apt install python3-pip
              pip3 --version
              sudo python3 -m pip install ansible
              sudo apt install rsync -y
        
        - run: 
            name: "Install Nodejs"
            command: |
              sudo apt-get update
              curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash - 
              sudo apt-get install -y nodejs
              node --version
              npm --version   
        - run:
            name: "Deploy backend"
            command: |
              cd backend
              npm i
              npm run build
              cd ../.circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
        - destroy-environment  
        - revert-migrations

  smoke-test:
    docker:
      - image:  python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add python curl
            apk add --update ansible
            apk add tar gzip 
            apk add --update nodejs npm
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
      docker: 
        - image: amazon/aws-cli
      steps:
      - checkout
      - run: 
          name: Install dependencies
          command: yum install -y tar gzip nodejs npm
      - run: 
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment  
      - revert-migrations

  cleanup:
    docker: 
      - image: amazon/aws-cli
    steps:
      - run:
          name: Recover oldstack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => same work flow id"
            fi 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
          # requires: [cloudfront-update]